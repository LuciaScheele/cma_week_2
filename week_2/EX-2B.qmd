---
title: "EX. 2B"
format: html
editor: 
  markdown: 
    wrap: 72
---

# Exercise B

In preparation, you’ve read the paper by Laube and Purves (2011). In
this paper, the authors analyse speed at different scales and compare
these different values. Let’s conceptually reconstruct one of the
experiments the authors conducted.

Figure 8.1 shows how speed was calculated in the first of three scales.
Do you notice how their method differs to how we calculated speed? We
calculated the speed for a specific sample to be the distance travelled
to the next sample devided by the according time difference. Laube and
Purves (2011) use the distance travelled from the previous sample to the
next sample (and the according time difference).

To reproduce this experiment, we will use a new wild boar dataset with
following characteristics:

-   Small number of samples (200 locations)
-   Only one individual (caro)
-   A constant sampling interval (60s)

This last aspect is important, since we would otherwise have to deal
with varying sampling intervals, which would greatly complicate things.
Download this dataset here: caro60.csv. Import it just like you imported
the other wild boar data and save it to a new variable named caro (note
that the locations are stored in EPSG 2056).

## Needed functions (Time and Distance)

```{r}
library(dplyr)

## Time-diff. between Points
difftime_secs <- function(x, y){
  as.numeric(difftime(x, y, units = "secs"))
}

# Distance btw. Points
distance_by_element <- function(later, now){
  as.numeric(
    st_distance(later, now, by_element = TRUE)
  )
  }
```

## Dataimport

We can discard all columns with the exception of DatetimeUTC with select
(see below).

```{r}
library(readr)
library(sf)

caro <- read_delim("caro60.csv", delim = ",")
str(caro)

caro <- st_as_sf(caro,
    coords = c("E", "N"),
    crs = 2056) # entsprechendes CRS zuweisen (2 Mil und 1 Mil = Hinweis auf neues SChweizer Koordinatensystem)
str(caro)

# Selecting useful columns
caro <- caro |> 
  select(DatetimeUTC)
```

## Task 1: Scale 1

In our first scale, we will assume a sampling window of 120 seconds.
This conveniently means that for every location, you can use the
*previous and next location* to calculate speed. Try to implement this
in R.

### Calculating speed

```{r}
# timelag
caro <- caro |> mutate(
  timelag = difftime_secs(
  lead(DatetimeUTC), lag(DatetimeUTC)
))

# distance
caro <- caro |> mutate(
  steplength = distance_by_element(
  lag(geometry), lead(geometry)
  ))

# speed 
caro <- caro |> mutate(
  speed = steplength/timelag # in m/s
)

caro
```

## Task 2: Scale 2 (w = 240)

To compare the effect of different sampling intervals, Laube and Purves
(2011) calculated speed at different scales (i.e. different sampling
windows ).

In the previous task, we assumed a w = 120s. In this task, try to
implement w = 240s, which means using an offset of 2.

Tip: Use the n = parameter in lead/lag to increase the offset. Store
values timelag, steplength and speed in the columns timelag2,
steplength2 and speed2 to distinguish them from the values from scale 1

### Calculating speed

```{r}
# timelag at w = 240
caro <- caro |> mutate(
  timelag2 = difftime_secs(
  lead(DatetimeUTC, n= 2), lag(DatetimeUTC, n=2)
))

# distance at w = 240
caro <- caro |> mutate(
  steplength2 = distance_by_element(
  lag(geometry, n=2), lead(geometry, n=2)
  ))

# speed at w = 240
caro <- caro |> mutate(
  speed2 = steplength2/timelag2 # in m/s
)

# checking the result
caro |>
  st_drop_geometry() |>  # drop geometry and select only specific columns
  select(timelag2, steplength2, speed2) |>  # to display relevant data only
  head()
```

## Task 3: Scale 3 (w=480)

Redo the previous task with w= 480 (offset of 4)

### Calculating speed

```{r}
# timelag at w = 480
caro <- caro |> mutate(
  timelag3 = difftime_secs(
  lead(DatetimeUTC, n= 4), lag(DatetimeUTC, n=4)
))

# distance at w = 240
caro <- caro |> mutate(
  steplength3 = distance_by_element(
  lag(geometry, n=4), lead(geometry, n=4)
  ))

# speed at w = 240
caro <- caro |> mutate(
  speed3 = steplength3/timelag3 # in m/s
)

# checking the result
caro |>
  st_drop_geometry() |>  # drop geometry and select only specific columns
  select(timelag3, steplength3, speed3) |>  # to display relevant data only
  head(n=10)
```

##Task 4: Compare speed across scales We now have a dataframe with three
different speed values per sample, corresponding to the different scales
/ sampling windows. It would now be interesting to compare these
measurements and see our results correspond to those of Laube and Purves
(2011). In their experiments, the authors observe:

-   A steady decrease in median speed as the temporal analysis scale
    increases;
-   A decrease in the overall variance in speed as the temporal scale
    increases;
-   Lower minimum values at the shortest temporal scales;

The authors visualize these observations using box plots. To do the
same, we need to process our data slightly. Currently, our data looks
like this:

```{r}
caro |> 
  st_drop_geometry() |> 
  select(DatetimeUTC, speed, speed2, speed3)
```

### Boxplot of single column

We can make a box plot of a single column using ggplot2:

```{r}
library(ggplot2)

caro |> 
  ggplot(aes(y= speed)) +
  geom_boxplot(outliers = F) # we remove outliers to increase legibility, analogue

```

### Long table

However, if we want to compare speed with speed2 and speed3, we need
need a long table rather than wide one (which is what we currently
have). To make our table long, we can use the function pivot_longer from
tidyr:

```{r}
library(tidyr)
# before pivoting, let's simplify our data.frame
caro2 <- caro |> 
  st_drop_geometry() |> 
  select(DatetimeUTC, speed, speed2, speed3)

caro_long <- caro2 |> 
  pivot_longer(c(speed, speed2, speed3))

head(caro_long, n=20)
```

### Comparison

```{r}
ggplot(caro_long, aes(name, value)) +
  # we remove outliers to increase legibility, analogue
  # Laube and Purves (2011)
  geom_boxplot(outliers = FALSE)
```
